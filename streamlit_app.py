import streamlit as st
import requests
import datetime

# --- PDF Generation Dependencies ---
# We use weasyprint and markdown2 to convert the markdown plan to a PDF.
# These libraries need to be installed: pip install weasyprint markdown2
try:
    from weasyprint import HTML
    import markdown2
    PDF_CAPABLE = True
except ImportError:
    PDF_CAPABLE = False


# Backend endpoint
BASE_URL = "http://localhost:8000"

# Page configuration
st.set_page_config(
    page_title="üåç Travel Planner Agent",
    page_icon="üåç",
    layout="centered",
    initial_sidebar_state="expanded",
)

st.title("üåç Travel Planner Agent")

# --- Session State Initialization ---
# Initialize a session state variable to hold the generated plan.
if "current_plan" not in st.session_state:
    st.session_state.current_plan = ""

# --- UI Components ---
st.header("How can I help you plan your next trip?")
st.write("Let me know your destination and preferences, and I'll create a custom itinerary for you.")

# User input form
with st.form(key="query_form", clear_on_submit=True):
    user_input = st.text_input("Your Request", placeholder="e.g., Plan a 5-day trip to Goa")
    submit_button = st.form_submit_button("Generate Plan")

# --- Backend Logic and Plan Generation ---
# This block runs only when the form is submitted with valid input.
if submit_button and user_input.strip():
    try:
        # Show a spinner while the backend is processing the request
        with st.spinner("ü§ñ The AI agent is crafting your travel plan..."):
            payload = {"question": user_input}
            response = requests.post(f"{BASE_URL}/query", json=payload, timeout=300)

        # Check the response from the backend
        if response.status_code == 200:
            answer = response.json().get("answer", "Sorry, I couldn't generate a plan based on your request.")

            # Format the response into a clean Markdown document
            markdown_content = f"""# üåç AI Travel Plan

**Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
**Created by:** Your Personal Travel Agent

---

{answer}

---

*Disclaimer: This travel plan was generated by an AI. Please verify all details, such as opening hours, prices, and travel requirements, before your trip.*
            """
            # Store the newly generated plan in the session state
            st.session_state.current_plan = markdown_content
        else:
            # Display an error message if the backend call fails
            st.error(f"Failed to get a response from the agent. Status code: {response.status_code}\n\nDetails: {response.text}")
            st.session_state.current_plan = "" # Clear any previous plan

    except requests.exceptions.RequestException as e:
        st.error(f"Could not connect to the backend service: {e}")
        st.session_state.current_plan = ""
    except Exception as e:
        # Catch any other unexpected errors
        st.error(f"An unexpected error occurred: {e}")
        st.session_state.current_plan = ""


# --- Display Plan and Download Button ---
# This block checks if a plan exists in the session state and displays it.
if st.session_state.current_plan:
    st.markdown("---")
    st.header("Your Custom Itinerary")

    # Display the generated travel plan
    st.markdown(st.session_state.current_plan)

    # --- DOWNLOAD BUTTON (PDF) ---
    if PDF_CAPABLE:
        try:
            # Convert the markdown content to HTML
            html_string = markdown2.markdown(st.session_state.current_plan)

            # Add some basic CSS for better PDF styling
            styled_html = f"""
            <style>
                @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');
                body {{
                    font-family: 'Roboto', sans-serif;
                    line-height: 1.6;
                }}
                h1, h2, h3 {{
                    color: #0d47a1; /* Dark Blue */
                }}
                strong {{
                    color: #1565c0; /* Medium Blue */
                }}
                hr {{
                    border: 1px solid #e0e0e0;
                }}
                em {{
                    font-style: italic;
                    color: #555555;
                }}
                ul {{
                    list-style-type: disc;
                    padding-left: 20px;
                }}
            </style>
            {html_string}
            """

            # Use WeasyPrint to generate PDF bytes from the HTML string
            pdf_bytes = HTML(string=styled_html).write_pdf()

            st.download_button(
                label="üì• Download Plan as PDF",
                data=pdf_bytes,
                file_name=f"Travel_Plan_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                mime="application/pdf",
                help="Click to download your travel plan as a PDF file."
            )
        except Exception as e:
            st.error(f"An error occurred while generating the PDF: {e}")
    else:
        # Fallback message if PDF libraries are not installed
        st.warning("PDF generation is unavailable. Please install `weasyprint` and `markdown2` to enable this feature.")
        # Provide the markdown download as a fallback
        st.download_button(
            label="üì• Download Plan as Markdown",
            data=st.session_state.current_plan.encode("utf-8"),
            file_name=f"Travel_Plan_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
            mime="text/markdown"
        )
